<?xml version="1.0" ?><OrchExportInfo><Time></Time><User>jgilmet</User><Comments></Comments><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"CDWLogVar","taskLabel":"CDWLogVar","isActive":true,"taskSummary":"","taskDescription":"","taskDetails":"Configname: InputConfigCategory: CDW Tool Kit\r\n<------- Task Information ------->\r\nTask contains 3 inputs\r\n   printVar (Label: \'printVar\', Type: password, MappableType: password)\r\n   printVarClear (Label: \'printVarClear\', Type: text, MappableType: gen_text_input)\r\n   logEverything (Label: \'logEverything\', Type: text, MappableType: Boolean)\r\n\r\nTask contains 0 outputs\r\nisRepoUsed: falseRepo file: Repo: script: // CDW Version 1.0\n//\n// Original Source\n//\n//  CDW Original\n//\n// History\n//    Rev 2.0 - 1/12/2017 - JMG\n//    Rev 1 - 8/6/2015 - JMG\n//\n// Description:\n//     Log Variables from UCS Director.  This makes it easier to debug.  Note that this function allows you to\n//     log everything returned, or only the first 1k.  The limitation was introduced becuase in UCSD 6.0(1),\n//     logging anything over 1k cause a overflow in Java and those logs would not appear.\n//     This function should be backwards compatible with prior versions of CDWLogVar\n//\nimportPackage(org.apache.log4j);\nimportPackage(java.io);\nimportPackage(java.io);\nimportPackage(java.lang);\nimportPackage(java.util);\nimportPackage(com.cloupia.model.cIM);\nimportPackage(com.cloupia.service.cIM.inframgr);\n\nvar logEverything = input.logEverything;\nvar chunksize = 1024;\n\nfunction printVariable() {\n\n    // Log to the workflow log\n    try {\n        var printVar = input.printVar;\n        logger.addError(\"printVar Length:  \" + printVar.length());\n        if (printVar.length() < chunksize) {\n            logger.addError(\"printVar:  \" + printVar);\n        } else {\n            if (logEverything == \"true\") {\n                logger.addError(\"printVar Length:  \" + printVar.length());\n                var printVarLoop = Math.ceil(printVar.length() / chunksize);\n                for (var loop = 0; loop != printVarLoop; loop++) {\n                    var start = (loop * chunksize);\n                    var end = (loop * chunksize + chunksize);\n                    logger.addError(\"printvar[\" + loop + \"]:  \" + printVar.substring(start, end));\n                }\n            } else {\n                logger.addError(\"printVar[First Chunk]:  \" + printVar.substring(0, chunksize));\n            }\n        }\n    } catch (e) {}\n\n    try {\n        var printVarClear = input.printVarClear;\n        logger.addError(\"printVarClear Length:  \" + printVarClear.length());\n        if (printVarClear.length() < chunksize) {\n            logger.addError(\"printVarClear:  \" + printVarClear);\n        } else {\n            if (logEverything == \"true\") {\n                var printVarClearLoop = Math.ceil(printVarClear.length() / chunksize);\n                for (var loop = 0; loop != printVarClearLoop; loop++) {\n                    var start = (loop * chunksize);\n                    var end = (loop * chunksize + chunksize);\n                    logger.addError(\"printVarClear[\" + loop + \"]:  \" + printVarClear.substring(start, end));\n                }\n            } else {\n                logger.addError(\"printVarClear[First Chunk]:  \" + printVarClear.substring(0, chunksize));\n            }\n        }\n    } catch (e) {}\n}\n\nprintVariable();","taskData":"eyJuYW1lIjoiQ0RXTG9nVmFyIiwibGFiZWwiOiJDRFdMb2dWYXIiLCJyZWdpc3RlclVuZGVyVHJlZSI6IkNEVyBUb29sIEtpdCIsImlzQWN0aXZlIjp0cnVlLCJpc0hpZGRlbiI6ZmFsc2UsInN1bW1hcnkiOiIiLCJkZXNjcmlwdGlvbiI6IiIsInVjc2RGcm9tVmVyc2lvbiI6IjYuMC4xLjAiLCJjb25maWciOnsibmFtZSI6IklucHV0Q29uZmlnIiwiZmllbGRzIjp7Imxpc3QiOlt7Im5hbWUiOiJwcmludFZhciIsImxhYmVsIjoicHJpbnRWYXIiLCJwZXJzaXN0Ijp0cnVlLCJjb2x1bW5JbmZvIjpudWxsLCJ0eXBlIjoicGFzc3dvcmQiLCJtYXBUb1R5cGUiOiJwYXNzd29yZCIsIm1hbmRhdG9yeSI6ZmFsc2UsInJiaWQiOiIiLCJzaXplIjoibWVkaXVtIiwiaGVscCI6IiIsImFubm90YXRpb24iOiIiLCJncm91cCI6IiIsInZhbGlkYXRlIjpmYWxzZSwiZm9ybU1hbmFnZWRUYWJsZSI6ZmFsc2UsImFkZEVudHJ5Rm9ybSI6IiIsImVkaXRFbnRyeUZvcm0iOiIiLCJkZWxldGVFbnRyeUZvcm0iOiIiLCJtb3ZlVXBGb3JtIjoiIiwibW92ZURvd25Gb3JtIjoiIiwiaW5mb0VudHJ5Rm9ybSI6IiIsInJ1bkFjdGlvbkZvcm0iOiIiLCJlZGl0YWJlIjp0cnVlLCJoaWRkZW4iOmZhbHNlLCJtdWx0aWxpbmUiOmZhbHNlLCJtYXhMZW5ndGgiOjEyOCwibG92IjoiIiwibG92UHJvdmlkZXIiOiIiLCJvcmRlciI6OTk5OTksInVwbG9hZERpciI6IiIsInRhYmxlIjoiIiwidmFsaWRhdG9yIjoiIiwicmVnZXgiOiIuKiIsInJlZ2V4TGFiZWwiOiIuKiIsIm1pblZhbHVlIjotOTIyMzM3MjAzNjg1NDc3NTgwOCwibWF4VmFsdWUiOjkyMjMzNzIwMzY4NTQ3NzU4MDcsImhpZGVGaWVsZE5hbWUiOiIiLCJoaWRlRmllbGRWYWx1ZSI6IiIsImhpZGVGaWVsZENvbmRpdGlvbiI6IkVRIiwiaHRtbFBvcHVwVGFnIjoiIiwiaHRtbFBvcHVwTGFiZWwiOiIiLCJodG1sUG9wdXBTdHlsZSI6MCwiaHRtbFBvcHVwVGV4dCI6IiIsInZpZXciOiIiLCJ2YWx1ZXMiOltdfSx7Im5hbWUiOiJwcmludFZhckNsZWFyIiwibGFiZWwiOiJwcmludFZhckNsZWFyIiwicGVyc2lzdCI6dHJ1ZSwiY29sdW1uSW5mbyI6bnVsbCwidHlwZSI6InRleHQiLCJtYXBUb1R5cGUiOiJnZW5fdGV4dF9pbnB1dCIsIm1hbmRhdG9yeSI6ZmFsc2UsInJiaWQiOiIiLCJzaXplIjoibWVkaXVtIiwiaGVscCI6IiIsImFubm90YXRpb24iOiIiLCJncm91cCI6IiIsInZhbGlkYXRlIjpmYWxzZSwiZm9ybU1hbmFnZWRUYWJsZSI6ZmFsc2UsImFkZEVudHJ5Rm9ybSI6IiIsImVkaXRFbnRyeUZvcm0iOiIiLCJkZWxldGVFbnRyeUZvcm0iOiIiLCJtb3ZlVXBGb3JtIjoiIiwibW92ZURvd25Gb3JtIjoiIiwiaW5mb0VudHJ5Rm9ybSI6IiIsInJ1bkFjdGlvbkZvcm0iOiIiLCJlZGl0YWJlIjp0cnVlLCJoaWRkZW4iOmZhbHNlLCJtdWx0aWxpbmUiOmZhbHNlLCJtYXhMZW5ndGgiOjEyOCwibG92IjoiIiwibG92UHJvdmlkZXIiOiIiLCJvcmRlciI6OTk5OTksInVwbG9hZERpciI6IiIsInRhYmxlIjoiIiwidmFsaWRhdG9yIjoiIiwicmVnZXgiOiIuKiIsInJlZ2V4TGFiZWwiOiIuKiIsIm1pblZhbHVlIjotOTIyMzM3MjAzNjg1NDc3NTgwOCwibWF4VmFsdWUiOjkyMjMzNzIwMzY4NTQ3NzU4MDcsImhpZGVGaWVsZE5hbWUiOiIiLCJoaWRlRmllbGRWYWx1ZSI6IiIsImhpZGVGaWVsZENvbmRpdGlvbiI6IkVRIiwiaHRtbFBvcHVwVGFnIjoiIiwiaHRtbFBvcHVwTGFiZWwiOiIiLCJodG1sUG9wdXBTdHlsZSI6MCwiaHRtbFBvcHVwVGV4dCI6IiIsInZpZXciOiIiLCJ2YWx1ZXMiOltdfSx7Im5hbWUiOiJsb2dFdmVyeXRoaW5nIiwibGFiZWwiOiJsb2dFdmVyeXRoaW5nIiwicGVyc2lzdCI6dHJ1ZSwiY29sdW1uSW5mbyI6bnVsbCwidHlwZSI6InRleHQiLCJtYXBUb1R5cGUiOiJCb29sZWFuIiwibWFuZGF0b3J5IjpmYWxzZSwicmJpZCI6IiIsInNpemUiOiJtZWRpdW0iLCJoZWxwIjoiIiwiYW5ub3RhdGlvbiI6IiIsImdyb3VwIjoiIiwidmFsaWRhdGUiOmZhbHNlLCJmb3JtTWFuYWdlZFRhYmxlIjpmYWxzZSwiYWRkRW50cnlGb3JtIjoiIiwiZWRpdEVudHJ5Rm9ybSI6IiIsImRlbGV0ZUVudHJ5Rm9ybSI6IiIsIm1vdmVVcEZvcm0iOiIiLCJtb3ZlRG93bkZvcm0iOiIiLCJpbmZvRW50cnlGb3JtIjoiIiwicnVuQWN0aW9uRm9ybSI6IiIsImVkaXRhYmUiOnRydWUsImhpZGRlbiI6ZmFsc2UsIm11bHRpbGluZSI6ZmFsc2UsIm1heExlbmd0aCI6MTI4LCJsb3YiOiIiLCJsb3ZQcm92aWRlciI6IiIsIm9yZGVyIjo5OTk5OSwidXBsb2FkRGlyIjoiIiwidGFibGUiOiIiLCJ2YWxpZGF0b3IiOiIiLCJyZWdleCI6Ii4qIiwicmVnZXhMYWJlbCI6Ii4qIiwibWluVmFsdWUiOi05MjIzMzcyMDM2ODU0Nzc1ODA4LCJtYXhWYWx1ZSI6OTIyMzM3MjAzNjg1NDc3NTgwNywiaGlkZUZpZWxkTmFtZSI6IiIsImhpZGVGaWVsZFZhbHVlIjoiIiwiaGlkZUZpZWxkQ29uZGl0aW9uIjoiRVEiLCJodG1sUG9wdXBUYWciOiIiLCJodG1sUG9wdXBMYWJlbCI6IiIsImh0bWxQb3B1cFN0eWxlIjowLCJodG1sUG9wdXBUZXh0IjoiIiwidmlldyI6IiIsInZhbHVlcyI6W119XSwibW9UeXBlTmFtZSI6ImNvbS5jbG91cGlhLnNlcnZpY2UuY0lNLmluZnJhbWdyLm1kdWkuTURVSUZpZWxkRGVzY3IiLCJ2YWxpZGF0b3JOYW1lIjoiTURVSUZpZWxkTGlzdFZhbGlkYXRvciJ9fSwib3V0cHV0cyI6eyJsaXN0IjpbXSwibW9UeXBlTmFtZSI6ImNvbS5jbG91cGlhLnNlcnZpY2UuY0lNLmluZnJhbWdyLm1kdWkuTURVSVdvcmtmbG93VGFza091dHB1dERlc2NyIiwidmFsaWRhdG9yTmFtZSI6Ik1EVUlPdXRwdXRMaXN0VmFsaWRhdG9yIn0sImV4ZWN1dGlvbkxhbmciOiJKYXZhc2NyaXB0IiwiaXNSZXBvVXNlZCI6ZmFsc2UsInJlcG9OaWNrbmFtZSI6IiIsInNjcmlwdEZpbGVuYW1lIjoiIiwiZmlsZVNIQSI6bnVsbCwiZXhlY3V0aW9uU2NyaXB0IjoiLy8gQ0RXIFZlcnNpb24gMS4wXG4vL1xuLy8gT3JpZ2luYWwgU291cmNlXG4vL1xuLy8gIENEVyBPcmlnaW5hbFxuLy9cbi8vIEhpc3Rvcnlcbi8vICAgIFJldiAyLjAgLSAxLzEyLzIwMTcgLSBKTUdcbi8vICAgIFJldiAxIC0gOC82LzIwMTUgLSBKTUdcbi8vXG4vLyBEZXNjcmlwdGlvbjpcbi8vICAgICBMb2cgVmFyaWFibGVzIGZyb20gVUNTIERpcmVjdG9yLiAgVGhpcyBtYWtlcyBpdCBlYXNpZXIgdG8gZGVidWcuICBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvXG4vLyAgICAgbG9nIGV2ZXJ5dGhpbmcgcmV0dXJuZWQsIG9yIG9ubHkgdGhlIGZpcnN0IDFrLiAgVGhlIGxpbWl0YXRpb24gd2FzIGludHJvZHVjZWQgYmVjdWFzZSBpbiBVQ1NEIDYuMCgxKSxcbi8vICAgICBsb2dnaW5nIGFueXRoaW5nIG92ZXIgMWsgY2F1c2UgYSBvdmVyZmxvdyBpbiBKYXZhIGFuZCB0aG9zZSBsb2dzIHdvdWxkIG5vdCBhcHBlYXIuXG4vLyAgICAgVGhpcyBmdW5jdGlvbiBzaG91bGQgYmUgYmFja3dhcmRzIGNvbXBhdGlibGUgd2l0aCBwcmlvciB2ZXJzaW9ucyBvZiBDRFdMb2dWYXJcbi8vXG5pbXBvcnRQYWNrYWdlKG9yZy5hcGFjaGUubG9nNGopO1xuaW1wb3J0UGFja2FnZShqYXZhLmlvKTtcbmltcG9ydFBhY2thZ2UoamF2YS5pbyk7XG5pbXBvcnRQYWNrYWdlKGphdmEubGFuZyk7XG5pbXBvcnRQYWNrYWdlKGphdmEudXRpbCk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLm1vZGVsLmNJTSk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLnNlcnZpY2UuY0lNLmluZnJhbWdyKTtcblxudmFyIGxvZ0V2ZXJ5dGhpbmcgPSBpbnB1dC5sb2dFdmVyeXRoaW5nO1xudmFyIGNodW5rc2l6ZSA9IDEwMjQ7XG5cbmZ1bmN0aW9uIHByaW50VmFyaWFibGUoKSB7XG5cbiAgICAvLyBMb2cgdG8gdGhlIHdvcmtmbG93IGxvZ1xuICAgIHRyeSB7XG4gICAgICAgIHZhciBwcmludFZhciA9IGlucHV0LnByaW50VmFyO1xuICAgICAgICBsb2dnZXIuYWRkRXJyb3IoXCJwcmludFZhciBMZW5ndGg6ICBcIiArIHByaW50VmFyLmxlbmd0aCgpKTtcbiAgICAgICAgaWYgKHByaW50VmFyLmxlbmd0aCgpIDwgY2h1bmtzaXplKSB7XG4gICAgICAgICAgICBsb2dnZXIuYWRkRXJyb3IoXCJwcmludFZhcjogIFwiICsgcHJpbnRWYXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGxvZ0V2ZXJ5dGhpbmcgPT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuYWRkRXJyb3IoXCJwcmludFZhciBMZW5ndGg6ICBcIiArIHByaW50VmFyLmxlbmd0aCgpKTtcbiAgICAgICAgICAgICAgICB2YXIgcHJpbnRWYXJMb29wID0gTWF0aC5jZWlsKHByaW50VmFyLmxlbmd0aCgpIC8gY2h1bmtzaXplKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBsb29wID0gMDsgbG9vcCAhPSBwcmludFZhckxvb3A7IGxvb3ArKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSAobG9vcCAqIGNodW5rc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmQgPSAobG9vcCAqIGNodW5rc2l6ZSArIGNodW5rc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5hZGRFcnJvcihcInByaW50dmFyW1wiICsgbG9vcCArIFwiXTogIFwiICsgcHJpbnRWYXIuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5hZGRFcnJvcihcInByaW50VmFyW0ZpcnN0IENodW5rXTogIFwiICsgcHJpbnRWYXIuc3Vic3RyaW5nKDAsIGNodW5rc2l6ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIHRyeSB7XG4gICAgICAgIHZhciBwcmludFZhckNsZWFyID0gaW5wdXQucHJpbnRWYXJDbGVhcjtcbiAgICAgICAgbG9nZ2VyLmFkZEVycm9yKFwicHJpbnRWYXJDbGVhciBMZW5ndGg6ICBcIiArIHByaW50VmFyQ2xlYXIubGVuZ3RoKCkpO1xuICAgICAgICBpZiAocHJpbnRWYXJDbGVhci5sZW5ndGgoKSA8IGNodW5rc2l6ZSkge1xuICAgICAgICAgICAgbG9nZ2VyLmFkZEVycm9yKFwicHJpbnRWYXJDbGVhcjogIFwiICsgcHJpbnRWYXJDbGVhcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAobG9nRXZlcnl0aGluZyA9PSBcInRydWVcIikge1xuICAgICAgICAgICAgICAgIHZhciBwcmludFZhckNsZWFyTG9vcCA9IE1hdGguY2VpbChwcmludFZhckNsZWFyLmxlbmd0aCgpIC8gY2h1bmtzaXplKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBsb29wID0gMDsgbG9vcCAhPSBwcmludFZhckNsZWFyTG9vcDsgbG9vcCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IChsb29wICogY2h1bmtzaXplKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZCA9IChsb29wICogY2h1bmtzaXplICsgY2h1bmtzaXplKTtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmFkZEVycm9yKFwicHJpbnRWYXJDbGVhcltcIiArIGxvb3AgKyBcIl06ICBcIiArIHByaW50VmFyQ2xlYXIuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5hZGRFcnJvcihcInByaW50VmFyQ2xlYXJbRmlyc3QgQ2h1bmtdOiAgXCIgKyBwcmludFZhckNsZWFyLnN1YnN0cmluZygwLCBjaHVua3NpemUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHt9XG59XG5cbnByaW50VmFyaWFibGUoKTsiLCJjb250cm9sbGVySW1wbCI6eyJsaXN0IjpbXSwibW9UeXBlTmFtZSI6ImNvbS5jbG91cGlhLmxpYi5jTWFjcm9VSS5NYWNyb0NvbnRyb2xsZXJTY3JpcHQiLCJ2YWxpZGF0b3JOYW1lIjpudWxsfX0="}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><version>3.0</version></OrchExportInfo>