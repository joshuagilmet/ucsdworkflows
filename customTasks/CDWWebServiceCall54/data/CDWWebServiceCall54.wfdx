<?xml version="1.0" ?><OrchExportInfo><Time></Time><User>jgilmet</User><Comments></Comments><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"CDWWebServiceCall54","taskLabel":"CDWWebServiceCall54","isActive":true,"taskSummary":"This task is UCS-D 5.4 safe/compliant\n","taskDescription":"","taskDetails":"Configname: InputConfigCategory: CDW Tool Kit\r\n<------- Task Information ------->\r\nTask contains 11 inputs\r\n   ServerAddress (Label: \'ServerAddress\', Type: text, MappableType: gen_text_input)\r\n   ServerProtocol (Label: \'ServerProtocol\', Type: text, MappableType: HTTPProtocol)\r\n   HTTPAuthUser (Label: \'HTTPAuthUser\', Type: password, MappableType: password)\r\n   HTTPAuthPass (Label: \'HTTPAuthPass\', Type: password, MappableType: password)\r\n   HTTPMethod (Label: \'HTTPMethod\', Type: text, MappableType: HTTPMethod)\r\n   HTTPURI (Label: \'HTTPURI\', Type: text, MappableType: gen_text_input)\r\n   HTTPBodyRequestText (Label: \'HTTPBodyRequestText\', Type: text, MappableType: gen_text_input)\r\n   HTTPContentType (Label: \'HTTPContentType\', Type: text, MappableType: HTTPContentType)\r\n   HTTPRequestHeaderRight (Label: \'HTTPRequestHeaderRight\', Type: password, MappableType: password)\r\n   HTTPRequestHeaderLeft (Label: \'HTTPRequestHeaderLeft\', Type: password, MappableType: password)\r\n   ServerPort (Label: \'ServerPort\', Type: number, MappableType: gen_text_input)\r\n\r\nTask contains 2 outputs\r\n   HTTPResponseCode (Description: \'\', Type: gen_text_input)\r\n   HTTPResponse (Description: \'\', Type: password)\r\nisRepoUsed: falseRepo file: Repo: script: // CDW Version 2.3\n// \n// Original Source\n//\n//  https://communities.cisco.com/docs/DOC-57405\n//\n// History\n//    Rev 2.3 - 6/9/2016 - JMG - Added URL encoding for known characters\n//    Rev 2.2 - 4/22/2016 - JMG - Having it hide the right value for the header in case it contains sensitive info\n//    Rev 2.1 - 2/2/2016 - JMG - Fixed issue where it ignores ports passed to it\n//    Rev 2.0 - 12/15/2015 - JMG - reworked for UCSD 5.4 as prior implementation worked only up to 5.3\n//    Rev 1.1 - 8/24/2015 - JMG - Logs length of AUTH_USER & AUTH_PASSWORD\n//    Rev 1 - 8/6/2015 - JMG\n//\n// Description:\n//     You can use this to connect to a web service be it XML/SOAP or JSON\n//     It supports sending a singular set of HTTP headers at the moment.\n\n//----------------------------------------------------------------------------------------\n//\n//        Author: Russ Whitear (rwhitear@cisco.com)\n//\n// Workflow Task Name: HTTP_Function_v3_5.4.0.0\n//\n//            Version: 3.0\n//\n//            Updates: SSL Socket Factory modified for JDK8.\n//\n//      Modifications: Script now retrieves the network comment field from within the\n//                     Infoblox token message response.\n//\n//             Inputs: none.\n//\n//            Outputs: none.\n//\n//----------------------------------------------------------------------------------------\n\n//----------------------------------------------------------------------------------------\n//                                 ### FUNCTIONS ###\n//----------------------------------------------------------------------------------------\n\n//----------------------------------------------------------------------------------------\n//\n//        Author: Russ Whitear (rwhitear@cisco.com)\n//\n// Function Name: httpRequest()\n//\n//       Version: 3.0\n//\n// Modifications: Added HTTP header Connection:close to execute method to overcome the\n//                CLOSE_WAIT issue caused with releaseConnection().\n//\n//                Modified SSL socket factory code to work with UCS Director 5.4.0.0.\n//\n//   Description: HTTP Request function - httpRequest.\n//\n//                I have made the httpClient functionality more object like in order to\n//                make cloupia scripts more readable when making many/multiple HTTP/HTTPS\n//                requests within a single script.\n//\n//      Usage: 1. var request = new httpRequest();                   // Create new object.\n//\n//             2. request.setup(\"192.168.10.10\",\"https\",\"admin\",\"cisco123\");      // SSL.\n//          or:   request.setup(\"192.168.10.10\",\"http\",\"admin\",\"cisco123\");       // HTTP.\n//          or:   request.setup(\"192.168.10.10\",\"https\");           // SSL, no basicAuth.\n//          or:   request.setup(\"192.168.10.10\",\"http\");            // HTTP, no basicAuth.\n//\n//             3. request.getRequest(\"/\");                    // HTTP GET (URI).\n//          or:   request.postRequest(\"/\",\"some body text\");  // HTTP POST (URI,BodyText).\n//          or:   request.deleteRequest(\"/\");                 // HTTP DELETE (URI).\n//\n//  (optional) 4. request.contentType(\"json\");            // Add Content-Type HTTP header.\n//          or:   request.contentType(\"xml\");\n//\n//  (optional) 5. request.addHeader(\"X-Cloupia-Request-Key\",\"1234567890\");  // Any Header.\n//\n//             6. var statusCode = request.execute();                     // Send request.\n//\n//             7. var response = request.getResponse(\"asString\");   // Response as string.\n//          or:   var response = request.getResponse(\"asStream\");   // Response as stream.\n//\n//             8. request.disconnect();                             // Release connection.\n//\n//\n//          Note: Be sure to add these lines to the top of your script:\n//\n//          importPackage(java.util);\n//          importPackage(com.cloupia.lib.util);\n//          importPackage(org.apache.commons.httpclient);\n//          importPackage(org.apache.commons.httpclient.cookie);\n//          importPackage(org.apache.commons.httpclient.methods);\n//          importPackage(org.apache.commons.httpclient.auth);\n//          importPackage(org.apache.commons.httpclient.protocol);\n//          importClass(org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory);\n//          importPackage(com.cloupia.lib.cIaaS.vcd.api);\n//\n//----------------------------------------------------------------------------------------\n\nimportPackage(java.util);\nimportPackage(com.cloupia.lib.util);\nimportPackage(org.apache.commons.httpclient);\nimportPackage(org.apache.commons.httpclient.cookie);\nimportPackage(org.apache.commons.httpclient.methods);\nimportPackage(org.apache.commons.httpclient.auth);\nimportPackage(org.apache.commons.httpclient.protocol);\nimportClass(org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory);\nimportPackage(com.cloupia.lib.cIaaS.vcd.api);\n\nvar httpRequest = function () {};\n\nhttpRequest.prototype.setup = function(serverIp, serverPort, transport, username, password) {\n        this.serverIp = serverIp;\n        this.transport = transport;\n        this.username = username;\n        this.password = password;\n        this.serverPort = serverPort;\n        this.httpClient = new HttpClient();\n\n        // Decide whether to create an HTTP or HTTPS connection based up \'transport\'.\n        if( this.transport == \"https\" ) {\n                this.httpClient = CustomEasySSLSocketFactory.getIgnoreSSLClient(this.serverIp, this.serverPort);\n                this.httpClient.getParams().setCookiePolicy(\"default\");\n        } else {\n                // Create new HTTP connection.\n                this.httpClient.getHostConfiguration().setHost(this.serverIp, this.serverPort, \"http\");\n        }\n        this.httpClient.getParams().setCookiePolicy(\"default\");\n\n        // If username and password supplied, then use basicAuth.\n        if( this.username && this.password ) {\n                this.httpClient.getParams().setAuthenticationPreemptive(true);\n                this.defaultcreds = new UsernamePasswordCredentials(this.username, this.password);\n                this.httpClient.getState().setCredentials(new AuthScope(this.serverIp, -1, null), this.defaultcreds);\n        }\n};\n\nhttpRequest.prototype.contentType = function(contentType) {\n        this.contentType = contentType;\n        this.contentTypes = [\n                [\"xml\",\"application/xml\"],\n                [\"json\",\"application/json\"]\n        ];\n\n        for( this.i=0; this.i<this.contentTypes.length; this.i++)\n                if(this.contentTypes[this.i][0] == this.contentType)\n                        this.httpMethod.addRequestHeader(\"Content-Type\", this.contentTypes[this.i][1]);\n};\n\nhttpRequest.prototype.addHeader = function(headerName,headerValue) {\n        this.headerName = headerName;\n        this.headerValue = headerValue;\n        this.httpMethod.addRequestHeader(this.headerName, this.headerValue);\n};\n\nhttpRequest.prototype.execute = function() {\n        // Connection:close is hard coded here in order to ensure that the TCP connection\n        // gets torn down immediately after the request. Comment this line out if you wish to\n        // experiment with HTTP persistence.\n        this.httpMethod.addRequestHeader(\"Connection\", \"close\");\n        this.httpClient.executeMethod(this.httpMethod);\n        // Retrieve status code.\n        this.statusCode = this.httpMethod.getStatusCode();\n        return this.statusCode;\n}\n\nhttpRequest.prototype.getRequest = function(uri) {\n        this.uri = uri;\n        // Get request.\n        this.httpMethod = new GetMethod(this.uri);\n};\n\nhttpRequest.prototype.postRequest = function(uri,bodytext) {\n        this.uri = uri;\n        this.bodytext = bodytext;\n        // POST Request.\n        this.httpMethod = new PostMethod(this.uri);\n        this.httpMethod.setRequestEntity(new StringRequestEntity(this.bodytext));\n};\n\nhttpRequest.prototype.getResponse = function(asType) {\n        this.asType = asType;\n        if( this.asType == \"asStream\" )\n                return this.httpMethod.getResponseBodyAsStream();\n        else\n                return this.httpMethod.getResponseBodyAsString();\n};\n\nhttpRequest.prototype.deleteRequest = function(uri) {\n        this.uri = uri;\n        // Get request.\n        this.httpMethod = new DeleteMethod(this.uri);\n};\n\nhttpRequest.prototype.disconnect = function() {\n        // Release connection.\n        this.httpMethod.releaseConnection();\n};\n\n// Main code begins here \n\nvar debug=1;\n\nvar request = new httpRequest();\n\n// Look for characters that need to be swapped out for\n// proper URI encoding\nfunction encodeUCSDUrl(url,encodeCharacters) {\n\tvar newURL=\"\";\n\tvar singleCharacter=\"\";\n\tfor ( var urlLoop=0 ; urlLoop != url.length() ; urlLoop++) {\n\t\tsingleCharacter=url.substring(urlLoop,(urlLoop+1));\n\t\tif ( isEncoded(singleCharacter,encodeCharacters) ) {\n\t\t\tsingleCharacter=isEncoded(singleCharacter,encodeCharacters);\n\t\t}\n\t\tnewURL=newURL + singleCharacter;\n\t}\n\treturn newURL;\n}\n\nfunction isEncoded(needle,hayStack) {\n\tvar encoding=needle.charCodeAt(0);\n\tvar Result=hayStack[encoding];\n\treturn Result;\n}\n\n//  These are charcters we have found UCS Director\'s Apache library need to have\n//    encoded as it does not support doing it on their own\nvar charactersToBeEncoded= [ \"{\" , \"}\", \" \" ];\nvar encodeCharacters=[];\nvar encoding=\"\";\nvar character=\"\";\n\n//  Build up the \'encodedCharacters\' array to include those characters & codes\n//    we reference that we need to switch out\nfor ( var characterLoop = 0 ; characterLoop != charactersToBeEncoded.length ; characterLoop++ ) {\n\tcharacter=charactersToBeEncoded[characterLoop];\n\tencoding=character.charCodeAt(0);\n\tencodeCharacters[encoding]=encodeURIComponent(character);\n}\n\nvar serverAddress = input.ServerAddress; \nvar serverProtocol = input.ServerProtocol; \nvar serverPort = input.ServerPort; \nvar httpAuthUser = input.HTTPAuthUser; \nvar httpAuthPass = input.HTTPAuthPass; \nvar httpMethod = input.HTTPMethod; \nvar httpURI = input.HTTPURI; \nhttpURI=encodeUCSDUrl(httpURI,encodeCharacters);\n\nvar httpBodyRequestText = input.HTTPBodyRequestText; \nvar httpContentType = input.HTTPContentType; \nvar httpRequestHeaderLeft = input.HTTPRequestHeaderLeft; \nvar httpRequestHeaderRight = input.HTTPRequestHeaderRight;\n\nif ( debug == 1 ) {\n\tlogger.addError(\"serverAddress:  \" + serverAddress);\n\tlogger.addError(\"serverProtocol:  \" + serverProtocol);\n\tlogger.addError(\"serverPort:  \" + serverPort);\n\tlogger.addError(\"httpAuthUser:  SKIPPED, length:  \" + httpAuthUser.length());\n\tlogger.addError(\"httpAuthPass:  SKIPPED, length:  \" + httpAuthPass.length());\n\tlogger.addError(\"httpMethod:  \" + httpMethod );\n\tlogger.addError(\"httpURI:  \" + httpURI );\n// may contain sensitive information, only uncomment if you are sure\n//\tlogger.addError(\"httpBodyRequestText:  \" + httpBodyRequestText );\n\tlogger.addError(\"httpContentType:  \" + httpContentType);\n\tlogger.addError(\"httpRequestHeaderLeft:  \" + httpRequestHeaderLeft);\n//\tlogger.addError(\"httpRequestHeaderRight:  \" + httpRequestHeaderRight);\n}\n\nif ( httpAuthUser.length() > 1 ) {\n\trequest.setup(serverAddress,serverPort,serverProtocol,httpAuthUser,httpAuthPass);\n} else {\n\trequest.setup(serverAddress,serverPort,serverProtocol);\n}\n\nif ( httpMethod == \"GET\" ) {\n\trequest.getRequest(httpURI);\n} else {\n\trequest.postRequest(httpURI,httpBodyRequestText);\n}\n\nif ( debug == 1 ) {\n\tvar number=httpRequestHeaderLeft.length();\n\tlogger.addError(\"number:  \" + number + \"\\n\");\n\tlogger.addError(\"httpRequestHeaderLeft.length:  \" + httpRequestHeaderLeft.length() + \"\\n\"); \n} \n\nif ( httpRequestHeaderLeft.length() > 1 ) {\n\trequest.addHeader(httpRequestHeaderLeft,httpRequestHeaderRight);\n}\n\nif ( httpContentType.length() > 1 ) {\n\trequest.contentType(httpContentType);\n}\n\n//request.addHeader(\"X-Cloupia-Request-Key\",\"1234567890\");\nvar statusCode = request.execute();\nlogger.addInfo(\"Request 1 status code: \" +statusCode);\n\nvar response = request.getResponse(\"asString\");\nif ( debug == 2 ) {\n\tlogger.addInfo(\"Response: \" + response);\n}\n\noutput.HTTPResponse=response;\noutput.HTTPResponseCode=statusCode;\nrequest.disconnect();\nif ( debug ) {\n\tlogger.addError(\"Response Length:  \" + response.length());\n}","taskData":""}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><version>3.0</version></OrchExportInfo>